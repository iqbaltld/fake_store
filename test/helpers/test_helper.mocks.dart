// Mocks generated by Mockito 5.4.6 from annotations
// in fake_store/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:connectivity_plus/connectivity_plus.dart' as _i12;
import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i8;
import 'package:fake_store/core/error/failures.dart' as _i14;
import 'package:fake_store/core/network/api_manager.dart' as _i10;
import 'package:fake_store/core/network/network_info.dart' as _i9;
import 'package:fake_store/features/authentication/domain/entities/user.dart'
    as _i20;
import 'package:fake_store/features/authentication/domain/repositories/auth_repository.dart'
    as _i6;
import 'package:fake_store/features/authentication/domain/usecases/check_auth_status_use_case.dart'
    as _i21;
import 'package:fake_store/features/authentication/domain/usecases/get_user_details_use_case.dart'
    as _i22;
import 'package:fake_store/features/authentication/domain/usecases/login_use_case.dart'
    as _i23;
import 'package:fake_store/features/authentication/domain/usecases/logout_use_case.dart'
    as _i25;
import 'package:fake_store/features/authentication/domain/usecases/params/login_params.dart'
    as _i24;
import 'package:fake_store/features/cart/domain/entities/cart_item.dart'
    as _i26;
import 'package:fake_store/features/cart/domain/repositories/cart_repository.dart'
    as _i7;
import 'package:fake_store/features/cart/domain/usecases/add_to_cart_use_case.dart'
    as _i27;
import 'package:fake_store/features/cart/domain/usecases/get_cart_items_use_case.dart'
    as _i30;
import 'package:fake_store/features/cart/domain/usecases/get_cart_total_use_case.dart'
    as _i31;
import 'package:fake_store/features/cart/domain/usecases/remove_from_cart_use_case.dart'
    as _i28;
import 'package:fake_store/features/cart/domain/usecases/update_cart_item_use_case.dart'
    as _i29;
import 'package:fake_store/features/product/data/datasources/product_data_source.dart'
    as _i16;
import 'package:fake_store/features/product/data/models/product_model.dart'
    as _i4;
import 'package:fake_store/features/product/domain/entities/product.dart'
    as _i15;
import 'package:fake_store/features/product/domain/repositories/product_repository.dart'
    as _i5;
import 'package:fake_store/features/product/domain/usecases/get_categories_use_case.dart'
    as _i19;
import 'package:fake_store/features/product/domain/usecases/get_product_by_id_use_case.dart'
    as _i18;
import 'package:fake_store/features/product/domain/usecases/get_products_use_case.dart'
    as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductModel_2 extends _i1.SmartFake implements _i4.ProductModel {
  _FakeProductModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductRepository_3 extends _i1.SmartFake
    implements _i5.ProductRepository {
  _FakeProductRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthRepository_4 extends _i1.SmartFake
    implements _i6.AuthRepository {
  _FakeAuthRepository_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCartRepository_5 extends _i1.SmartFake
    implements _i7.CartRepository {
  _FakeCartRepository_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseOptions_6 extends _i1.SmartFake implements _i8.BaseOptions {
  _FakeBaseOptions_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpClientAdapter_7 extends _i1.SmartFake
    implements _i8.HttpClientAdapter {
  _FakeHttpClientAdapter_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransformer_8 extends _i1.SmartFake implements _i8.Transformer {
  _FakeTransformer_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterceptors_9 extends _i1.SmartFake implements _i8.Interceptors {
  _FakeInterceptors_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_10<T1> extends _i1.SmartFake implements _i8.Response<T1> {
  _FakeResponse_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDio_11 extends _i1.SmartFake implements _i8.Dio {
  _FakeDio_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);
}

/// A class which mocks [ApiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiManager extends _i1.Mock implements _i10.ApiManager {
  MockApiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<T> get<T>(
    String? path, {
    Map<String, dynamic>? queryParams,
    _i8.Options? options,
    T Function(dynamic)? fromJson,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #queryParams: queryParams,
                #options: options,
                #fromJson: fromJson,
              },
            ),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #get,
                      [path],
                      {
                        #queryParams: queryParams,
                        #options: options,
                        #fromJson: fromJson,
                      },
                    ),
                  ),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(
                  this,
                  Invocation.method(
                    #get,
                    [path],
                    {
                      #queryParams: queryParams,
                      #options: options,
                      #fromJson: fromJson,
                    },
                  ),
                ),
          )
          as _i2.Future<T>);

  @override
  _i2.Future<T> post<T>(
    String? path, {
    Map<String, dynamic>? queryParams,
    dynamic data,
    _i8.Options? options,
    T Function(dynamic)? fromJson,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #queryParams: queryParams,
                #data: data,
                #options: options,
                #fromJson: fromJson,
              },
            ),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #post,
                      [path],
                      {
                        #queryParams: queryParams,
                        #data: data,
                        #options: options,
                        #fromJson: fromJson,
                      },
                    ),
                  ),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(
                  this,
                  Invocation.method(
                    #post,
                    [path],
                    {
                      #queryParams: queryParams,
                      #data: data,
                      #options: options,
                      #fromJson: fromJson,
                    },
                  ),
                ),
          )
          as _i2.Future<T>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i12.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<List<_i12.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i2.Stream<List<_i12.ConnectivityResult>>.empty(),
          )
          as _i2.Stream<List<_i12.ConnectivityResult>>);

  @override
  _i2.Future<List<_i12.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i2.Future<List<_i12.ConnectivityResult>>.value(
              <_i12.ConnectivityResult>[],
            ),
          )
          as _i2.Future<List<_i12.ConnectivityResult>>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i13.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);

  @override
  _i2.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);

  @override
  _i2.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i5.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>.value(
                  _FakeEither_1<_i14.Failure, List<_i15.Product>>(
                    this,
                    Invocation.method(#getProducts, []),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, _i15.Product>> getProductById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, _i15.Product>>.value(
                  _FakeEither_1<_i14.Failure, _i15.Product>(
                    this,
                    Invocation.method(#getProductById, [id]),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, _i15.Product>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<String>>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<String>>>.value(
                  _FakeEither_1<_i14.Failure, List<String>>(
                    this,
                    Invocation.method(#getCategories, []),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<String>>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>
  getProductsByCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getProductsByCategory, [category]),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>.value(
                  _FakeEither_1<_i14.Failure, List<_i15.Product>>(
                    this,
                    Invocation.method(#getProductsByCategory, [category]),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>);
}

/// A class which mocks [ProductDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductDataSource extends _i1.Mock implements _i16.ProductDataSource {
  MockProductDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i4.ProductModel>> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue: _i2.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[],
            ),
          )
          as _i2.Future<List<_i4.ProductModel>>);

  @override
  _i2.Future<_i4.ProductModel> getProductById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue: _i2.Future<_i4.ProductModel>.value(
              _FakeProductModel_2(
                this,
                Invocation.method(#getProductById, [id]),
              ),
            ),
          )
          as _i2.Future<_i4.ProductModel>);

  @override
  _i2.Future<List<String>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i2.Future<List<String>>.value(<String>[]),
          )
          as _i2.Future<List<String>>);

  @override
  _i2.Future<List<_i4.ProductModel>> getProductsByCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getProductsByCategory, [category]),
            returnValue: _i2.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[],
            ),
          )
          as _i2.Future<List<_i4.ProductModel>>);
}

/// A class which mocks [GetProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsUseCase extends _i1.Mock
    implements _i17.GetProductsUseCase {
  MockGetProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_3(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i5.ProductRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>.value(
                  _FakeEither_1<_i14.Failure, List<_i15.Product>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<_i15.Product>>>);
}

/// A class which mocks [GetProductByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductByIdUseCase extends _i1.Mock
    implements _i18.GetProductByIdUseCase {
  MockGetProductByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_3(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i5.ProductRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, _i15.Product>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, _i15.Product>>.value(
                  _FakeEither_1<_i14.Failure, _i15.Product>(
                    this,
                    Invocation.method(#call, [id]),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, _i15.Product>>);
}

/// A class which mocks [GetCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesUseCase extends _i1.Mock
    implements _i19.GetCategoriesUseCase {
  MockGetCategoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_3(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i5.ProductRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<String>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<String>>>.value(
                  _FakeEither_1<_i14.Failure, List<String>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<String>>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i14.Failure, String>> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [username, password]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, String>>.value(
              _FakeEither_1<_i14.Failure, String>(
                this,
                Invocation.method(#login, [username, password]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, String>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, _i20.User>> getUserDetails(int? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserDetails, [userId]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, _i20.User>>.value(
              _FakeEither_1<_i14.Failure, _i20.User>(
                this,
                Invocation.method(#getUserDetails, [userId]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, _i20.User>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#logout, []),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);

  @override
  _i2.Future<String?> getStoredToken() =>
      (super.noSuchMethod(
            Invocation.method(#getStoredToken, []),
            returnValue: _i2.Future<String?>.value(),
          )
          as _i2.Future<String?>);

  @override
  _i2.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(
            Invocation.method(#isLoggedIn, []),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);
}

/// A class which mocks [CheckAuthStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckAuthStatusUseCase extends _i1.Mock
    implements _i21.CheckAuthStatusUseCase {
  MockCheckAuthStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthRepository get authRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authRepository),
            returnValue: _FakeAuthRepository_4(
              this,
              Invocation.getter(#authRepository),
            ),
          )
          as _i6.AuthRepository);

  @override
  _i2.Future<bool> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i2.Future<bool>.value(false),
          )
          as _i2.Future<bool>);
}

/// A class which mocks [GetUserDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserDetailsUseCase extends _i1.Mock
    implements _i22.GetUserDetailsUseCase {
  MockGetUserDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthRepository get authRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authRepository),
            returnValue: _FakeAuthRepository_4(
              this,
              Invocation.getter(#authRepository),
            ),
          )
          as _i6.AuthRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, _i20.User>> call(int? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, _i20.User>>.value(
              _FakeEither_1<_i14.Failure, _i20.User>(
                this,
                Invocation.method(#call, [userId]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, _i20.User>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i23.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthRepository get authRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authRepository),
            returnValue: _FakeAuthRepository_4(
              this,
              Invocation.getter(#authRepository),
            ),
          )
          as _i6.AuthRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, String>> call(_i24.LoginParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, String>>.value(
              _FakeEither_1<_i14.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, String>>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i25.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthRepository get authRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authRepository),
            returnValue: _FakeAuthRepository_4(
              this,
              Invocation.getter(#authRepository),
            ),
          )
          as _i6.AuthRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);
}

/// A class which mocks [CartRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRepository extends _i1.Mock implements _i7.CartRepository {
  MockCartRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<_i26.CartItem>>> getCartItems() =>
      (super.noSuchMethod(
            Invocation.method(#getCartItems, []),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<_i26.CartItem>>>.value(
                  _FakeEither_1<_i14.Failure, List<_i26.CartItem>>(
                    this,
                    Invocation.method(#getCartItems, []),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<_i26.CartItem>>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> addToCart(
    _i15.Product? product,
    int? quantity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addToCart, [product, quantity]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#addToCart, [product, quantity]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> updateCartItem(
    int? productId,
    int? quantity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCartItem, [productId, quantity]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#updateCartItem, [productId, quantity]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> removeFromCart(int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFromCart, [productId]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#removeFromCart, [productId]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> clearCart() =>
      (super.noSuchMethod(
            Invocation.method(#clearCart, []),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#clearCart, []),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, int>> getCartItemCount() =>
      (super.noSuchMethod(
            Invocation.method(#getCartItemCount, []),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, int>>.value(
              _FakeEither_1<_i14.Failure, int>(
                this,
                Invocation.method(#getCartItemCount, []),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, int>>);

  @override
  _i2.Future<_i3.Either<_i14.Failure, double>> getCartTotal() =>
      (super.noSuchMethod(
            Invocation.method(#getCartTotal, []),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, double>>.value(
              _FakeEither_1<_i14.Failure, double>(
                this,
                Invocation.method(#getCartTotal, []),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, double>>);
}

/// A class which mocks [AddToCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToCartUseCase extends _i1.Mock implements _i27.AddToCartUseCase {
  MockAddToCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CartRepository get cartRepository =>
      (super.noSuchMethod(
            Invocation.getter(#cartRepository),
            returnValue: _FakeCartRepository_5(
              this,
              Invocation.getter(#cartRepository),
            ),
          )
          as _i7.CartRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> call(
    _i15.Product? product, {
    int? quantity = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product], {#quantity: quantity}),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#call, [product], {#quantity: quantity}),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);
}

/// A class which mocks [RemoveFromCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFromCartUseCase extends _i1.Mock
    implements _i28.RemoveFromCartUseCase {
  MockRemoveFromCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CartRepository get cartRepository =>
      (super.noSuchMethod(
            Invocation.getter(#cartRepository),
            returnValue: _FakeCartRepository_5(
              this,
              Invocation.getter(#cartRepository),
            ),
          )
          as _i7.CartRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> call(int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [productId]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#call, [productId]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);
}

/// A class which mocks [UpdateCartItemUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCartItemUseCase extends _i1.Mock
    implements _i29.UpdateCartItemUseCase {
  MockUpdateCartItemUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CartRepository get cartRepository =>
      (super.noSuchMethod(
            Invocation.getter(#cartRepository),
            returnValue: _FakeCartRepository_5(
              this,
              Invocation.getter(#cartRepository),
            ),
          )
          as _i7.CartRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, void>> call(
    int? productId,
    int? quantity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [productId, quantity]),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, void>>.value(
              _FakeEither_1<_i14.Failure, void>(
                this,
                Invocation.method(#call, [productId, quantity]),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, void>>);
}

/// A class which mocks [GetCartItemsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartItemsUseCase extends _i1.Mock
    implements _i30.GetCartItemsUseCase {
  MockGetCartItemsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CartRepository get cartRepository =>
      (super.noSuchMethod(
            Invocation.getter(#cartRepository),
            returnValue: _FakeCartRepository_5(
              this,
              Invocation.getter(#cartRepository),
            ),
          )
          as _i7.CartRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, List<_i26.CartItem>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i2.Future<_i3.Either<_i14.Failure, List<_i26.CartItem>>>.value(
                  _FakeEither_1<_i14.Failure, List<_i26.CartItem>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, List<_i26.CartItem>>>);
}

/// A class which mocks [GetCartTotalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartTotalUseCase extends _i1.Mock
    implements _i31.GetCartTotalUseCase {
  MockGetCartTotalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CartRepository get cartRepository =>
      (super.noSuchMethod(
            Invocation.getter(#cartRepository),
            returnValue: _FakeCartRepository_5(
              this,
              Invocation.getter(#cartRepository),
            ),
          )
          as _i7.CartRepository);

  @override
  _i2.Future<_i3.Either<_i14.Failure, double>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i2.Future<_i3.Either<_i14.Failure, double>>.value(
              _FakeEither_1<_i14.Failure, double>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i2.Future<_i3.Either<_i14.Failure, double>>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i8.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.BaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeBaseOptions_6(this, Invocation.getter(#options)),
          )
          as _i8.BaseOptions);

  @override
  _i8.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(
            Invocation.getter(#httpClientAdapter),
            returnValue: _FakeHttpClientAdapter_7(
              this,
              Invocation.getter(#httpClientAdapter),
            ),
          )
          as _i8.HttpClientAdapter);

  @override
  _i8.Transformer get transformer =>
      (super.noSuchMethod(
            Invocation.getter(#transformer),
            returnValue: _FakeTransformer_8(
              this,
              Invocation.getter(#transformer),
            ),
          )
          as _i8.Transformer);

  @override
  _i8.Interceptors get interceptors =>
      (super.noSuchMethod(
            Invocation.getter(#interceptors),
            returnValue: _FakeInterceptors_9(
              this,
              Invocation.getter(#interceptors),
            ),
          )
          as _i8.Interceptors);

  @override
  set options(_i8.BaseOptions? _options) => super.noSuchMethod(
    Invocation.setter(#options, _options),
    returnValueForMissingStub: null,
  );

  @override
  set httpClientAdapter(_i8.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(#httpClientAdapter, _httpClientAdapter),
        returnValueForMissingStub: null,
      );

  @override
  set transformer(_i8.Transformer? _transformer) => super.noSuchMethod(
    Invocation.setter(#transformer, _transformer),
    returnValueForMissingStub: null,
  );

  @override
  void close({bool? force = false}) => super.noSuchMethod(
    Invocation.method(#close, [], {#force: force}),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Future<_i8.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #head,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #head,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #headUri,
              [uri],
              {#data: data, #options: options, #cancelToken: cancelToken},
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #headUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #getUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #postUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #postUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #putUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #putUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #patch,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patchUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #patchUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #deleteUri,
              [uri],
              {#data: data, #options: options, #cancelToken: cancelToken},
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #deleteUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i8.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i8.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i8.FileAccessMode? fileAccessMode = _i8.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i8.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #download,
              [urlPath, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #fileAccessMode: fileAccessMode,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options,
              },
            ),
            returnValue: _i2.Future<_i8.Response<dynamic>>.value(
              _FakeResponse_10<dynamic>(
                this,
                Invocation.method(
                  #download,
                  [urlPath, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<dynamic>>);

  @override
  _i2.Future<_i8.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i8.ProgressCallback? onReceiveProgress,
    _i8.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i8.FileAccessMode? fileAccessMode = _i8.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i8.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadUri,
              [uri, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #fileAccessMode: fileAccessMode,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options,
              },
            ),
            returnValue: _i2.Future<_i8.Response<dynamic>>.value(
              _FakeResponse_10<dynamic>(
                this,
                Invocation.method(
                  #downloadUri,
                  [uri, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<dynamic>>);

  @override
  _i2.Future<_i8.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.CancelToken? cancelToken,
    _i8.Options? options,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #request,
              [url],
              {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #request,
                  [url],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i8.CancelToken? cancelToken,
    _i8.Options? options,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #requestUri,
              [uri],
              {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(
                  #requestUri,
                  [uri],
                  {
                    #data: data,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i2.Future<_i8.Response<T>> fetch<T>(_i8.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
            Invocation.method(#fetch, [requestOptions]),
            returnValue: _i2.Future<_i8.Response<T>>.value(
              _FakeResponse_10<T>(
                this,
                Invocation.method(#fetch, [requestOptions]),
              ),
            ),
          )
          as _i2.Future<_i8.Response<T>>);

  @override
  _i8.Dio clone({
    _i8.BaseOptions? options,
    _i8.Interceptors? interceptors,
    _i8.HttpClientAdapter? httpClientAdapter,
    _i8.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#clone, [], {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            }),
            returnValue: _FakeDio_11(
              this,
              Invocation.method(#clone, [], {
                #options: options,
                #interceptors: interceptors,
                #httpClientAdapter: httpClientAdapter,
                #transformer: transformer,
              }),
            ),
          )
          as _i8.Dio);
}
